#!/usr/bin/env perl
######################### Sample invocation
#./pgspray   -c /path/to/config   -1
# 
#
# then query from prometheus:
# histogram_quantile(.95,sum by (le) (increase(pgspray_response_msec_bucket[5m])))
# 
# NOTE: pgspray(1) combines the functionalities of pgspray_hist(1) and pgspray_summary(1)
#
# NOTE: bucket boundaries are forever fixed at  5, 6, 7, 8, 10, 15, 25, 50, and 100  msec
#
#
# You could also picture this histogram data as a heatmap by using the query: sum(increase(http_request_duration_seconds_bucket[10m])) by (le), making sure to set the format as "heatmap," the legend format as {{ le }}, and setting the visualization in the panel settings to "heatmap."



use strict;
use v5.10;
use warnings;
use DBI;
use Time::HiRes qw( time usleep );
use feature qw( switch );
use Getopt::Compact ;
no if $] >= 5.018, warnings => qw( experimental::smartmatch );
use Data::Dumper;
use Parallel::ForkManager;
use Net::Prometheus;
use LWP::UserAgent;
use Config::INI::Reader;
use File::Slurp; 
#use HTTP::Date qw(time2iso time2str) ;

use constant MAX_FORKS => 8 ;
use constant RC_FILES  => qw( ini pgspray.ini  /etc/default/pgspray /etc/default/pgspray.ini  ); 
use constant DEFAULTS  => {  
           host_ip            => $ENV{PGHOST}     || 'localhost', 
           hostname           => 'localhost', 
           port               => $ENV{PGPORT}     ||  5432,
           sslmode            => $ENV{PGSSLMODE}  || 'prefer',
           user               => $ENV{PGUSER}     ||'prometheus',
           database           => $ENV{PGDATABASE} || 'postgres',
           password           => $ENV{PGPASSWORD} ||  undef,
           chmod              =>  0640 ,
           timeout            =>  4,
	   secret_file        => '/etc/prometheus/exporters/secret',
           output_interval    =>  60,
           out_dir            =>  '/var/lib/prometheus/node-exporter/node_dat',
           out_mode           =>  'stdout',        #  push, file, stdout
           one_shot           =>  undef,
           samples_per_minute =>  20 ,
           sql                =>  "SELECT 'response_tme'" ,
          outfile             => '/var/lib/prometheus/node-exporter/node_dat/pgspray.prom' ,
          #sql                =>  "SELECT current_setting('server_version')",
     }; 

########## Global
my $dbh;
#############  Read Config
sub find_config { 
    -r $_ && return $_  for RC_FILES  
}
sub read_config {
        my ($defaults, $file) = @_;
        my $in = Config::INI::Reader->read_file( $file );
        my $result;
        for my $k (keys %$in) {
            next  if $k =~ /^common$/i ;
            next  if $k =~ /^#/        ;
            my $tmp = DEFAULTS()       ;
            my $entry;
            for (keys %{$in->{common}}) { 
                $entry     = $in->{common}{$_}            ;
                $entry     =~ s/\s+[#].*$//               ;
                $entry     =~ s/^\s*[#]//                 ;
                $tmp->{$_} = $entry    unless /^\s*[#]/   ;
            }

            for (keys %{$in->{$k}})   {
                $entry     = $in->{$k}{$_}                ;
                $entry     =~ s/\s*[#].*$//               ;
                $entry     =~ s/^\s*[#]//                 ;
                $tmp->{$_} = $entry    unless /^\s*[#]/   ;
            }
            $result->{$k} = { %$tmp };
        }
        return $result;
}
sub calc_truth_false {
       my $val = shift;
       return undef unless $val;
       return undef if $val =~ '^\s*$';
       return undef if $val =~ '^(undef|none|na)$';
       return undef if $val =~ /^(no|false|0)$/i;
       return $val;
}
sub calc_passwd {
       my $o = shift;
        if ( $o->{secret_file}) {
                my $passwd = read_file($o->{secret_file} ) || die;
                warn "password from file \"".  $o->{secret_file}. "\"\n";
                chomp $passwd ;
                return $passwd ;
        }
        return $o->{password} ;
}
sub calc_percentile {
        my ($per, $vals) = @_;
        my $pindex = ($per < 100) ? int(1+(($per/100)*scalar @$vals)) : scalar @$vals;
        $vals->[$pindex-1];
}
sub send_to_prometheus {
	    my ($content, $url) = @_;
	    my $request = HTTP::Request->new('POST', $url);
	    my $ua      = LWP::UserAgent->new();
	    $request ->content($content);
	    my $r       = $ua->request($request);
	    return 1 if ($r->is_success);
	    die 'POST failed. '. 'MSG: '. $r->decoded_content ; #. '(code'. $r->code. ")\n";
}
sub take_observation {
        my ($o, $dsn, $att) = @_ ;
        my ($start_time, $end_time);
        $start_time = time();
        $dbh        = DBI->connect($dsn, $o->{user},$o->{password}, $att) or die "@_\n" ;
        #$dbh->do("SELECT 3");
        $dbh->do( $o->{sql} );
        $end_time   = time();
        $dbh->rollback;
       ($end_time - $start_time)*1000;   # in mill seconds
}
sub show_settings {
    say Dumper (shift);
}
sub form_dsn {
        my $o = shift;
        "dbi:Pg:host=$o->{host_ip};port=$o->{port};dbname=$o->{database};sslmode=$o->{sslmode};application_name=$o->{appname}" 
}
sub main_work ;
############################################## Process ARGV
my $opt = new Getopt::Compact
              args   => '',
              modes  => [qw (verbose )],
              struct =>  [ [ [qw(c config)],   'config file'    , '=s' ],
		   	   [ [qw(1 once)],     'run only once'         ],
		   	   [ [qw(s show)],     'show parameters'       ],
		   	   [ [qw(dsn)],        'show DSN'             ],
	];
my $arg  = $opt->opts;
my $ini      =  $arg->{config}  || find_config()           ;
my $conf     =  read_config( DEFAULTS, $ini)               ;
my $once     =  $arg->{once}                               ; 
$arg->{show}  && show_settings( $conf) && exit             ;
my $numforks = scalar keys %$conf                          ;
   $numforks > MAX_FORKS and die "MAX_FORKS exeeded.\n"    ;
my $pm       = new Parallel::ForkManager( $numforks)       ;

############################################################ show DSN
if ($arg->{dsn}) {
        for my $cluster (keys %$conf) {
            say form_dsn( $conf->{$cluster} )              ; 
        }
        exit;
} # if
############################################################ 

DATA_LOOP:
foreach my $cluster (keys %$conf) {
     my $pid = $pm->start and next DATA_LOOP;
     main_work ($conf->{$cluster}, $once);
     $pm->finish; # Terminates the child process
}
#############################################  MAIN

sub init_histogram {
        my ($metric, $o) = @_ ;
	my $prom = Net::Prometheus->new(       disable_process_collector  => 1,
					       disable_perl_collector     => 1,
	);
	my $hist = $prom->new_histogram (     name    => $metric,
					      help    =>  'Time responce of posgresql request (in msec).', 
					      labels  => [qw/hostname host_ip port  cluster /] ,
					      buckets =>  [qw/ 4 6 7 8 10 25 50 90 /]);
         ($prom, $hist) ;
}
sub init_summary {
        my ($metric, $o) = @_ ;
	my $prom  = Net::Prometheus->new( disable_process_collector  => 1,
		  	                  disable_perl_collector     => 1,);

        my $summa = $prom->new_summary ( name    =>  $metric,
                                         help    =>  'Time responce of posgresql request (in msec).', 
                                         labels  => [qw/hostname host_ip port  cluster /]);
         ($prom, $summa) ;
}
sub summary_ouput {
        my ($result, $metric, $o) = @_;
        my @res = sort {$a<=>$b } @$result;
        my $msg;
        for (qw/ 0.5  0.8  0.9  0.95/  ) {
                  $msg .=sprintf qq(%s{hostname="%s",host_ip="%s",pg_port="%d",cluster="%s",quantile="%s"} %4f\n), 
                                                              $metric, $o->{hostname},$o->{host_ip}, $o->{port} ,
                                                               $o->{cluster}, $_, calc_percentile( $_*100 ,\@res);
        }    
        $msg;
}
sub main_work  {
     my ($o, $one) = @_;
        $o->{password}    =  calc_truth_false $o->{password}               ;
        $o->{password}    =  calc_passwd $o                                ;
        $o->{one_shot}    =  calc_truth_false $o->{one_shot}               ;
        $o->{secret_file} =  calc_truth_false $o->{secret_file}            ;
     my $msec_BETWEEN_SAMPLES   =  1_000 * 60 / $o->{samples_per_minute}   ;
     #############################################  MAIN

         my ($prom_hist, $hist)    = init_histogram('pgspray');
         my ($prom_summa, $summa)  = init_summary('pgspray_response');
	 my $labels                = { hostname=> $o->{hostname}, host_ip=>$o->{host_ip}, port=>$o->{port}, cluster=>$o->{cluster} };
	 my @result;
	 my $att                   = { AutoCommit => 0, ReadOnly => 1};
	 my $DSN                   = form_dsn ($o);
	 my $url                   =  'http://localhost:9091'. '/metrics/job/pgspray';
	######################################################

	while( 1 ) {
		eval { 
			local $SIG{ALRM} = sub { die "timeout" }; 
			alarm $o->{output_interval}; 
                        my $elapsed;
			while(1) {
                                $elapsed  =  take_observation ($o,$DSN, $att);
				$hist->observe( $labels, $elapsed );
                                $summa->observe( $labels, $elapsed );
                                push @result, $elapsed;
			 	usleep( $msec_BETWEEN_SAMPLES * 1_000); 
		    }
		}; 
		alarm 0; # cancel the alarm 
		if ($@ =~ /timeout/) {
                        #### output histogram
                        $dbh->rollback;
                        my $msg = $prom_hist->render ;
                        my $outfile = ($o->{out_dir}||"") . '/pgspray-'. $o->{cluster}. '.prom' ;
                       #### output summary
                       $msg  .= $prom_summa->render;
                       $msg  .= summary_ouput( \@result, 'pgspray_response', $o );
                       @result = ();
                       #### ouput  send
                       given ($o->{out_mode}) {
                            when  (/push/i)     { send_to_prometheus( $msg, $url)    }
                            when  (/file/i)     { write_file($outfile, $msg);
                                                 chmod $o->{chmod}, $outfile         }
                            when  (/stdout/i)   {  say $msg                          }
                            default             {  die "no default for 'mode'\n"     }
                       }
		 }
               exit if $o->{one_shot} || $one ;
	} # while
}
