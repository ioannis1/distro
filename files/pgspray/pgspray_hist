#!/usr/bin/env perl
######################### Sample invocation
#./pgspray_hist  -f /etc/default/pgspray  -a karat
#
# then query from prometheus:
# histogram_quantile(.95,sum by (le) (increase(pgspray_response_msec_bucket[5m])))
#
# NOTE: bucket boundaries are forever fixed at  5, 6, 7, 8, 10, 15, 25, 50, and 100  msec
#
# You could also picture this histogram data as a heatmap by using the query: sum(increase(http_request_duration_seconds_bucket[10m])) by (le), making sure to set the format as "heatmap," the legend format as {{ le }}, and setting the visualization in the panel settings to "heatmap."




use strict;
use v5.10;
use warnings;
use DBI;
use Time::HiRes qw( time usleep );
use feature qw( switch );
use Getopt::Std ;
no if $] >= 5.018, warnings => qw( experimental::smartmatch );
use Data::Dumper;
use Parallel::ForkManager;
use Net::Prometheus;
use LWP::UserAgent;
use Config::INI::Reader;
use File::Slurp; 
#use HTTP::Date qw(time2iso time2str) ;


use constant DEFAULTS => {  
           host_ip            => $ENV{PGHOST}     || 'localhost', 
           hostname           => 'localhost', 
           port               => $ENV{PGPORT}     ||  5332,
           sslmode            => $ENV{PGSSLMODE}  || 'prefer',
           user               => $ENV{PGUSER}     ||'prometheus',
           database           => $ENV{PGDATABASE} || 'postgres',
           password           => $ENV{PGPASSWORD} ||  undef,
           chmod              =>  0640 ,
           timeout            =>  4,
	   secret_file        => '/etc/prometheus/exporters/secret',
           output_interval    =>  60,
           outdir             =>  '/var/lib/prometheus/node-exporter/node_dat',
           out_mode           =>  'stdout',        #  push, file, stdout
           one_shot           =>  undef,
           samples_per_minute =>  20 ,
           sql                =>  "SELECT 'response_tme'" ,
          outfile             => '/var/lib/prometheus/node-exporter/node_dat/pgspray.prom' ,
          #sql                =>  "SELECT current_setting('server_version')",
     }; 

#############  Read Config
sub read_config {
        my ($defaults, $file) = @_;
        my $in = Config::INI::Reader->read_file( $file );
        my $result;
        for my $k (keys %$in) {
            next  if $k =~ /^common$/i ;
            next  if $k =~ /^#/        ;
            my $tmp = DEFAULTS()       ;
            my $entry;
            for (keys %{$in->{common}}) { 
                $entry     = $in->{common}{$_}            ;
                $entry     =~ s/\s+[#].*$//               ;
                $entry     =~ s/^\s*[#]//                 ;
                $tmp->{$_} = $entry    unless /^\s*[#]/   ;
            }

            for (keys %{$in->{$k}})   {
                $entry     = $in->{$k}{$_}                ;
                $entry     =~ s/\s*[#].*$//               ;
                $entry     =~ s/^\s*[#]//                 ;
                $tmp->{$_} = $entry    unless /^\s*[#]/   ;
            }
            $result->{$k} = { %$tmp };
        }
        return $result;
}
sub calc_passwd {
       my $o = shift;
        if ( $o->{secret_file}) {
                my $passwd = read_file($o->{secret_file} ) || die;
                warn "password from file \"".  $o->{secret_file}. "\"\n";
                chomp $passwd ;
                return $passwd ;
        }
        return $o->{password} ;
}
sub calc_percentile {
        my ($per, $vals) = @_;
        my $pindex = ($per < 100) ? int(1+(($per/100)*scalar @$vals)) : scalar @$vals;
        $vals->[$pindex-1];
}
sub main_work ;
my $pm   = new Parallel::ForkManager( 3 );
############################################## Process ARGV
my %arg ;
getopts('f:', \%arg);

my $ini  = $arg{f}  || '/etc/default/pgspray' ;
my $conf =  read_config( DEFAULTS, $ini);
#############################################  Read Config

DATA_LOOP:
foreach my $cluster (keys %$conf) {
  # Forks and returns the pid for the child:
  my $pid = $pm->start and next DATA_LOOP;

         main_work ($conf->{$cluster});

  $pm->finish; # Terminates the child process
}
#############################################  MAIN


sub main_work  {
     my $o = shift;
        $o->{password} =  calc_passwd $o;
     my $msec_BETWEEN_SAMPLES   =  1_000 * 60 / $o->{samples_per_minute}         ;
     #############################################  MAIN

	my $metric_name = 'pgspray';
	my $labels      = { hostname=> $o->{hostname}, host_ip=>$o->{host_ip}, port=>$o->{port}, cluster=>$o->{cluster} };
	my $prom = Net::Prometheus->new( disable_process_collector => 1,
					disable_perl_collector     => 1,
	);
	my $hist = $prom->new_histogram ( name    => $metric_name,
					  help    =>  'Time responce of posgresql request (in msec).', 
					  labels  => [qw/hostname host_ip port  cluster /] ,
					  buckets =>  [qw/ 4 6 7 8 10 25 50 90 /]);

	my ($sum,$count, @result, $dbh) = (0,0);
	my $att = { AutoCommit => 0, ReadOnly => 1};
	my $DSN = "dbi:Pg:host=$o->{host_ip};port=$o->{port};dbname=$o->{database};sslmode=$o->{sslmode};application_name=$o->{appname}" ;
	my $url =  'http://qft:9091'. '/metrics/job/pgspray';
	######################################################
	sub send_to_prometheus {
	    my ($content, $url) = @_;
	    my $request = HTTP::Request->new('POST', $url);
	    my $ua      = LWP::UserAgent->new();
	    $request ->content($content);
	    my $r       = $ua->request($request);
	    return 1 if ($r->is_success);
	    die 'POST failed. '. 'MSG: '. $r->decoded_content ; #. '(code'. $r->code. ")\n";
	}

	while( 1 ) {
		eval { 
			local $SIG{ALRM} = sub { die "timeout" }; 
			alarm $o->{output_interval}; 
			my ($start_time, $end_time,  $elapsed);
			while(1) {
				 $start_time = time();
				$dbh = DBI->connect($DSN, $o->{user},$o->{password}, $att) or die "@_\n" ;
				#$dbh->do("SELECT 3");
				$dbh->do( $o->{sql} );

				$end_time = time();
				$elapsed  = ($end_time - $start_time)*1000;   # in mill seconds
				$dbh->rollback;
				$hist->observe( $labels, $elapsed );
				usleep( $msec_BETWEEN_SAMPLES * 1_000); 
		    }
		}; 
		alarm 0; # cancel the alarm 
		if ($@ =~ /timeout/) {
                        $dbh->rollback;
                        my $msg = $prom->render ;
                        my $outfile = ($o->{outdir}||"") . '/pgspray-'. $o->{cluster}. '.prom' ;
                        given ($o->{outmode}) {
                            when  (/push/i)     { send_to_prometheus( $msg, $url)    }
                            when  (/file/i)     { write_file($outfile, $msg);
                                                 chmod $o->{chmod}, $outfile        }
                            when  (/stdout/i)   {  say $msg                          }
                            default             {  die "no default for 'mode'\n"     }
                       }
		}
               exit if $o->{one_shot} ;
	} # while
}
