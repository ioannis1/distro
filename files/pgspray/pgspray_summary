#!/usr/bin/env perl
######################### Sample invocation
#./pgspray_summary   -f /etc/default/pgspray  -a karat


use strict;
use v5.10;
use warnings;
use DBI;
use feature qw( switch );
use Getopt::Std ;
no if $] >= 5.018, warnings => qw( experimental::smartmatch );
use Time::HiRes qw( time usleep );
use Data::Dumper;
use Net::Prometheus;
use LWP::UserAgent;
use Config::INI::Reader;
use File::Slurp; 
#use HTTP::Date qw(time2iso time2str) ;

use constant DEFAULTS => {  
           host_ip            => $ENV{PGHOST}     || 'localhost', 
           hostname           => 'localhost', 
           port               => $ENV{PGPORT}     ||  5332,
           sslmode            => $ENV{PGSSLMODE}  || 'prefer',
           user               => $ENV{PGUSER}     ||'prometheus',
           database           => $ENV{PGDATABASE} || 'postgres',
           password           => $ENV{PGPASSWORD} ||  undef,
           chmod              =>  0640 ,
           timeout            => 4,
           push_gateway       =>  undef,
           #secret_file        => '/etc/prometheus/exporters/secret',
           output_interval    =>  60,
           outfile            =>  '/var/lib/prometheus/node-exporter/node_dat',
           out_mode           =>  'stdout',        #  push, file, stdout
           samples_per_minute =>  20 ,
           sql                =>  "SELECT 'response_tme'" ,
          #outfile            => '/var/lib/prometheus/node-exporter/node_dat/pgspray.prom' ,
          #sql                =>  "SELECT current_setting('server_version')",
     }; 


sub read_config {
        my ($defaults, $file) = @_;
        my $in = Config::INI::Reader->read_file( $file );
        my $result;
        for my $k (keys %$in) {
            next  if $k =~ /^common$/i ;
            my $tmp = DEFAULTS();
            $tmp->{$_} = $in->{common}{$_} for (keys %{$in->{common}}) ; 

            $tmp->{$_} = $in->{$k}{$_} for (keys %{$in->{$k}}) ; 
           $result->{$k} = { %$tmp };
        }
        return $result;
}
sub calc_passwd {
       my $o = shift;
        if ( $o->{secret_file}) {
                my $passwd = read_file($o->{secret_file} ) || die;
                warn "password from file \"".  $o->{secret_file}. "\"\n";
                chomp $passwd ;
                return $passwd ;
        }
        return $o->{password} ;
}
sub calc_percentile {
        my ($per, $vals) = @_;
        my $pindex = ($per < 100) ? int(1+(($per/100)*scalar @$vals)) : scalar @$vals;
        $vals->[$pindex-1];
}
sub main_work ;
############################################## Process ARGV
my %arg ;
getopts('a:f:', \%arg);

my $aim  = $arg{a}  || 'main' ;
my $ini  = $arg{f}  || '/etc/default/pgspray' ;
#############################################  Read Config
my $conf          =  read_config( DEFAULTS, $ini);
my $o             =  $conf->{$aim};
   $o->{password} =  calc_passwd $o;
main_work( $o);


#############################################  MAIN

sub main_work {
     my $o = shift;
     my $msec_BETWEEN_SAMPLES   =  1_000 * 60 / $o->{samples_per_minute} ;

    my $metric_name = 'pgspray';
    my $labels      = { hostname=> $o->{hostname}, host_ip=>$o->{host_ip}, port=>$o->{port}, cluster=>$o->{cluster} };
    my $prom = Net::Prometheus->new( disable_process_collector => 1,
                                    disable_perl_collector     => 1,
    );
    my $summa = $prom->new_summary ( name    =>  $metric_name,
                                     help    =>  'Time responce of posgresql request (in msec).', 
                                     labels  => [qw/hostname host_ip port  cluster /]);

    my ( @result, $dbh) = (0,0);
    my $att = { AutoCommit => 0, ReadOnly => 1};
    my $DSN = "dbi:Pg:host=$o->{host_ip};port=$o->{port};dbname=$o->{database};sslmode=$o->{sslmode};application_name=$o->{appname}" ;

    my $url =  'http://qft:9091'. '/metrics/job/pgspray';
    ######################################################
    sub send_to_prometheus {
        my ($content, $url) = @_;
        my $request = HTTP::Request->new('POST', $url);
        my $ua      = LWP::UserAgent->new();
        $request ->content($content);
        my $r       = $ua->request($request);
        return 1 if ($r->is_success);
        #croak "Can't send POST request to '${'url'}'. MSG: " . $response->decoded_content . " Code: " . $response->code;
        die 'POST failed. '. 'MSG: '. $r->decoded_content ; #. '(code'. $r->code. ")\n";
    }
    sub calc_mode {
            my ($push, $outfile) = @_;
            $push    && return 'pushgateway_exporter';
            $outfile && return 'node_exporter';
            return 'stdout';
    }

    while(1) {
            eval { 
                    local $SIG{ALRM} = sub { die "timeout" }; 
                    alarm $o->{output_interval}; 

                    my ($start_time, $end_time,  $elapsed);
                    while(1) {
                            $start_time = time();
                            $dbh = DBI->connect($DSN, $o->{user},$o->{password}, $att) or die "@_\n" ;
                            $dbh->do($o->{sql});
                            $end_time = time();
                            $elapsed  = ($end_time - $start_time)*1000;   # in mill seconds
                            $dbh->rollback;
                            push @result, $elapsed;
                            $summa->observe( $labels, $elapsed );
                            usleep( $msec_BETWEEN_SAMPLES * 1_000); 
                }
            }; 
            alarm 0; # cancel the alarm 
            if ($@ =~ /timeout/) {
                   $dbh->rollback;
                   my @res = sort {$a<=>$b } @result;
                   my $msg;
                   for (qw/ 0.5  0.9  0.99/  ) {
                     $msg .=sprintf qq(%s{hostname="%s",host_ip="%s",pg_port="%d",cluster="%s",quantile="%s"} %4f\n), 
                                 $metric_name, $o->{hostname},$o->{host_ip}, $o->{port} ,
                                 $o->{cluster}, $_, calc_percentile( $_*100 ,\@res);
                   }    
                   @result = ();
                  #################################` send OUTPUT
                  $msg = $prom->render . $msg;
                  my $outfile = ($o->{outdir}||"") . '/pgspray-'. $o->{cluster}. '.prom' ;
		  my $mode =  calc_mode( $o->{push_gateway}, $o->{outfile});
                  given ($o->{outmode}) {
                            when  ('push')     { send_to_prometheus( $msg, $url)    }
                            when  ('file')     { write_file($outfile, $msg);
                                                 chmod $o->{chmod}, $outfile        }
                            when  ('stdout')   {  say $msg                          }
                            default            {  die "no default for 'mode'\n"     }
                  }
            } # if timeout
  }  # while
}
