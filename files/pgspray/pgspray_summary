#!/usr/bin/env perl
######################### Sample invocation
#./pgspray_hist  -c  /path/to/config   -1


use strict;
use v5.10;
use warnings;
use DBI;
use feature qw( switch );
use Getopt::Compact ;
no if $] >= 5.018, warnings => qw( experimental::smartmatch );
use Time::HiRes qw( time usleep );
use Data::Dumper;
use Parallel::ForkManager;
use Net::Prometheus;
use LWP::UserAgent;
use Config::INI::Reader;
use File::Slurp; 

use constant MAX_FORKS => 8 ;
use constant RC_FILES  => qw( ini pgspray.ini  /etc/default/pgspray /etc/default/pgspray.ini  ); 
use constant DEFAULTS  => {  
           host_ip            => $ENV{PGHOST}     || 'localhost', 
           hostname           => 'localhost', 
           port               => $ENV{PGPORT}     ||  5432,
           sslmode            => $ENV{PGSSLMODE}  || 'prefer',
           user               => $ENV{PGUSER}     ||'prometheus',
           database           => $ENV{PGDATABASE} || 'postgres',
           password           => $ENV{PGPASSWORD} ||  undef,
           chmod              =>  0640 ,
           timeout            => 4,
           push_gateway       =>  undef,
           secret_file        => '/etc/prometheus/exporters/secret',
           output_interval    =>  60,
           outfile            =>  '/var/lib/prometheus/node-exporter/node_dat',
           out_mode           =>  'stdout',        #  push, file, stdout
           samples_per_minute =>  20 ,
           sql                =>  "SELECT 'response_tme'" ,
           outfile            => '/var/lib/prometheus/node-exporter/node_dat/pgspray.prom' ,
           one_shot           =>  undef,
          #sql                =>  "SELECT current_setting('server_version')",
     }; 


sub find_config { 
    -r $_ && return $_  for RC_FILES  
}
sub read_config {
        my ($defaults, $file) = @_;
        my $in = Config::INI::Reader->read_file( $file );
        my $result;
        for my $k (keys %$in) {
            next  if $k =~ /^common$/i ;
            next  if $k =~ /^#/        ;
            my $tmp = DEFAULTS()       ;
            my $entry;
            for (keys %{$in->{common}}) { 
                $entry     = $in->{common}{$_}            ;
                $entry     =~ s/\s+[#].*$//               ;
                $entry     =~ s/^\s*[#]//                 ;
                $tmp->{$_} = $entry    unless /^\s*[#]/   ;
            }

            for (keys %{$in->{$k}})   {
                $entry     = $in->{$k}{$_}                ;
                $entry     =~ s/\s*[#].*$//               ;
                $entry     =~ s/^\s*[#]//                 ;
                $tmp->{$_} = $entry    unless /^\s*[#]/   ;
            }
            $result->{$k} = { %$tmp };
        }
        return $result;
}
sub calc_truth_false {
       my $val = shift;
       return undef unless $val;
       return undef if $val =~ '^\s*$';
       return undef if $val =~ '^(undef|none|na)$';
       return undef if $val =~ /^(no|false|0)$/i;
       return $val;
}
sub calc_passwd {
       my $o = shift;
        if ( $o->{secret_file}) {
                my $passwd = read_file($o->{secret_file} ) || die;
                warn "password from file \"".  $o->{secret_file}. "\"\n";
                chomp $passwd ;
                return $passwd ;
        }
        return $o->{password} ;
}
sub calc_percentile {
        my ($per, $vals) = @_;
        my $pindex = ($per < 100) ? int(1+(($per/100)*scalar @$vals)) : scalar @$vals;
        $vals->[$pindex-1];
}
	sub send_to_prometheus {
	    my ($content, $url) = @_;
	    my $request = HTTP::Request->new('POST', $url);
	    my $ua      = LWP::UserAgent->new();
	    $request ->content($content);
	    my $r       = $ua->request($request);
	    return 1 if ($r->is_success);
	    die 'POST failed. '. 'MSG: '. $r->decoded_content ; #. '(code'. $r->code. ")\n";
	}
sub show_settings {
    say Dumper (shift);
}
sub form_dsn {
        my $o = shift;
        "dbi:Pg:host=$o->{host_ip};port=$o->{port};dbname=$o->{database};sslmode=$o->{sslmode};application_name=$o->{appname}" 
}
sub main_work ;
############################################## Process ARGV
my $opt = new Getopt::Compact
              args   => '',
              modes  => [qw (verbose )],
              struct =>  [ [ [qw(c config)],   'config file'    , '=s' ],
		   	   [ [qw(1 once)],     'run only once'         ],
		   	   [ [qw(s show)],     'show parameters'       ],
		   	   [ [qw(dsn)],        'show DSN'              ],
	];
my $arg  = $opt->opts;
my $ini      =  $arg->{conf}  || find_config()             ;
my $conf     =  read_config( DEFAULTS, $ini)               ;
my $once     =  $arg->{once}                               ; 
$arg->{show}  && show_settings( $conf) && exit             ;
my $numforks = scalar keys %$conf                          ;
   $numforks > MAX_FORKS and die "MAX_FORKS exeeded.\n"    ;
my $pm       = new Parallel::ForkManager( $numforks)       ;

############################################################ show DSN
if ($arg->{dsn}) {
        for my $cluster (keys %$conf) {
            say form_dsn( $conf->{$cluster} )              ;
        }
        exit;
} # if
#####################################################################

DATA_LOOP:
foreach my $cluster (keys %$conf) {
  # Forks and returns the pid for the child:
  my $pid = $pm->start and next DATA_LOOP;

         main_work ($conf->{$cluster}, $once);

  $pm->finish; # Terminates the child process
}
#############################################  MAIN

sub main_work {
     my ($o, $one) = @_;
        $o->{password}    =  calc_truth_false $o->{password}               ;
        $o->{password}    =  calc_passwd $o                                ;
        $o->{one_shot}    =  calc_truth_false $o->{one_shot}               ;
        $o->{secret_file} =  calc_truth_false $o->{secret_file}            ;
     my $msec_BETWEEN_SAMPLES   =  1_000 * 60 / $o->{samples_per_minute}   ;

    my $metric_name = 'pgspray';
    my $labels      = { hostname=> $o->{hostname}, host_ip=>$o->{host_ip}, port=>$o->{port}, cluster=>$o->{cluster} };
    my $prom = Net::Prometheus->new( disable_process_collector => 1,
                                    disable_perl_collector     => 1,
    );
    my $summa = $prom->new_summary ( name    =>  $metric_name,
                                     help    =>  'Time responce of posgresql request (in msec).', 
                                     labels  => [qw/hostname host_ip port  cluster /]);

    my ( @result, $dbh) = (0,0);
    my $att = { AutoCommit => 0, ReadOnly => 1};
    my $DSN = "dbi:Pg:host=$o->{host_ip};port=$o->{port};dbname=$o->{database};sslmode=$o->{sslmode};application_name=$o->{appname}" ;

    my $url =  'http://localhost:9091'. '/metrics/job/pgspray';
    ######################################################

    while(1) {
            eval { 
                    local $SIG{ALRM} = sub { die "timeout" }; 
                    alarm $o->{output_interval}; 

                    my ($start_time, $end_time,  $elapsed);
                    while(1) {
                            $start_time = time();
                            $dbh = DBI->connect($DSN, $o->{user},$o->{password}, $att) or die "@_\n" ;
                            $dbh->do($o->{sql});
                            $end_time = time();
                            $elapsed  = ($end_time - $start_time)*1000;   # in mill seconds
                            $dbh->rollback;
                            push @result, $elapsed;
                            $summa->observe( $labels, $elapsed );
                            usleep( $msec_BETWEEN_SAMPLES * 1_000); 
                }
            }; 
            alarm 0; # cancel the alarm 
            if ($@ =~ /timeout/) {
                   $dbh->rollback;
                   my @res = sort {$a<=>$b } @result;
                   my $msg;
                   for (qw/ 0.5  0.9  0.99/  ) {
                     $msg .=sprintf qq(%s{hostname="%s",host_ip="%s",pg_port="%d",cluster="%s",quantile="%s"} %4f\n), 
                                 $metric_name, $o->{hostname},$o->{host_ip}, $o->{port} ,
                                 $o->{cluster}, $_, calc_percentile( $_*100 ,\@res);
                   }    
                   @result = ();
                  #################################` send OUTPUT
                  $msg = $prom->render . $msg;
                  my $outfile = ($o->{out_dir}||"") . '/pgspray-'. $o->{cluster}. '.prom' ;
                  given ($o->{out_mode}) {
                            when  (/push/i)     { send_to_prometheus( $msg, $url)    }
                            when  (/file/i)     { write_file($outfile, $msg);
                                                  chmod $o->{chmod}, $outfile        }
                            when  (/stdout/i)   {  say $msg                          }
                            default             {  die "no default for 'mode'\n"     }
                  }
            }
            exit if $o->{one_shot} || $one ;
   } # while
} # sub
__DATA__
            } # if timeout
  }  # while
}
